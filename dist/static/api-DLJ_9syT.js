import{a as c}from"./index-ngrFHoWO.js";const s=c.create({baseURL:"https://api.seudominio.com/api",timeout:1e4,withCredentials:!1});s.interceptors.request.use(e=>{const o=localStorage.getItem("token");return o&&(e.headers.Authorization=`Bearer ${o}`),e},e=>(console.error("❌ Erro na requisição:",e),Promise.reject(e)));s.interceptors.response.use(e=>e,e=>{const{response:o,request:t,message:i}=e;if(o){const{status:n,data:r}=o;n===401&&(console.warn("🔒 401 recebido — limpando sessão e redirecionando para /login"),localStorage.removeItem("token"),localStorage.removeItem("usuario"),window.location.pathname.includes("/login")||(window.location.href="/login")),n===403&&console.warn("🚫 403 Acesso negado"),n>=500&&console.error("🔥 Erro interno do servidor");const a=(r==null?void 0:r.erro)||(r==null?void 0:r.message)||`Erro HTTP ${n}`;return Promise.reject(new Error(a))}return t?(console.error("🌐 Erro de rede - Servidor indisponível"),Promise.reject(new Error("Servidor indisponível. Verifique sua conexão."))):(console.error("⚙️ Erro na configuração da requisição:",i),Promise.reject(new Error("Erro na configuração da requisição")))});const l=()=>{try{const e=localStorage.getItem("usuario");return e?JSON.parse(e):null}catch{return localStorage.removeItem("usuario"),null}};export{s as a,l as g};
